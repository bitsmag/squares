!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
Board	models/board.js	/^  this.board.push(square72, square73, square74, square75, square76, square77, square78, square79, square80);$/;"	c
Board.getSquare	models/board.js	/^  Board.prototype.getSquare = function(id) {$/;"	m
Board.getSquareByPos	models/board.js	/^  Board.prototype.getSquareByPos = function(x, y){$/;"	m
Match	models/match.js	/^function Match(){$/;"	c
Match.addPlayer	models/match.js	/^Match.prototype.addPlayer = function(player) { \/\/ERROR: matchIsFull, nameAlreadyInUse$/;"	m
Match.getMatchCreator	models/match.js	/^Match.prototype.getMatchCreator = function() {$/;"	m
Match.getPlayer	models/match.js	/^Match.prototype.getPlayer = function(playerName) { \/\/ERROR: playerNotFound$/;"	m
Match.getPlayerByColor	models/match.js	/^Match.prototype.getPlayerByColor = function(playerColor) {$/;"	m
Match.isNameInUse	models/match.js	/^Match.prototype.isNameInUse = function(name) {$/;"	m
MatchController	controllers/matchController.js	/^function MatchController(match){$/;"	c
MatchController.countdown	controllers/matchController.js	/^MatchController.prototype.countdown = function(countdownDuration){ \/\/ The Countdown to start the match$/;"	m
MatchController.function.decrementCountdown	controllers/matchController.js	/^  function decrementCountdown(x){$/;"	f
MatchController.function.durationDecrement	controllers/matchController.js	/^  function durationDecrement(){$/;"	f
MatchController.function.tick	controllers/matchController.js	/^  function tick(){$/;"	f
MatchController.matchTicker	controllers/matchController.js	/^MatchController.prototype.matchTicker = function(){$/;"	m
MatchController.runMatch	controllers/matchController.js	/^MatchController.prototype.runMatch = function(){$/;"	m
MatchController.timer	controllers/matchController.js	/^MatchController.prototype.timer = function(duration){ \/\/ The timer which indicates the duration of the match$/;"	m
MatchesManager	models/matchesManager.js	/^function MatchesManager(){$/;"	c
MatchesManager.addMatch	models/matchesManager.js	/^MatchesManager.prototype.addMatch = function(match) {$/;"	m
MatchesManager.getMatch	models/matchesManager.js	/^MatchesManager.prototype.getMatch = function(matchID) { \/\/ERROR: matchNotFound$/;"	m
MatchesManager.removeMatch	models/matchesManager.js	/^MatchesManager.prototype.removeMatch = function(matchID) {$/;"	m
Player	models/player.js	/^function Player(name, matchID, matchCreator){ \/\/ERROR: matchNotFound, matchIsFull, nameAlreadyInUse$/;"	c
Square	models/square.js	/^function Square(squareID, edgesTo, position, startPoints){$/;"	c
author	package.json	/^  "author": "sven",$/;"	f
body-parser	package.json	/^    "body-parser": "^1.14.1",$/;"	f
calculateStep	controllers/matchTicker/positionUpdater.js	/^}$/;"	f
chai	package.json	/^    "chai": "*",$/;"	f
check	controllers/matchTicker/circuitsChecker.js	/^var util = require('util');$/;"	f
clearSquares	controllers/matchController.js	/^      }$/;"	f
countdown	views/assets/js/match.js	/^function countdown(secondsLeft){$/;"	f
createMatch	controllers/createMatch.js	/^var createMatch = function(matchCreatorName){$/;"	f
dependencies	package.json	/^  "dependencies": {$/;"	f
description	package.json	/^  "description": "socket based multiplayer game",$/;"	f
devDependencies	package.json	/^  "devDependencies": {$/;"	f
express	package.json	/^    "express": "~4.12.2",$/;"	f
getNewPlayerPositions	controllers/matchTicker/positionUpdater.js	/^}$/;"	f
getPoints	controllers/matchTicker/circuitsChecker.js	/^};$/;"	f
getPoints.checkValidity	controllers/matchTicker/circuitsChecker.js	/^  function checkValidity(stack, alreadyVisitedVertex){ \/\/ Will check if a circuit is valid. returns the value (score) of the circuit if valid, otherwise 0$/;"	f
getPoints.dfs	controllers/matchTicker/circuitsChecker.js	/^  function dfs(theSquare, theColor){ \/\/ The actual algorithm (Depth First Search)$/;"	f
getPoints.getVertices	controllers/matchTicker/circuitsChecker.js	/^  function getVertices(s, c){ \/\/ Returns all squares in the same color reachable from the current square (neighbors)$/;"	f
getPoints.setAllSquaresUnvisited	controllers/matchTicker/circuitsChecker.js	/^  function setAllSquaresUnvisited(){ \/\/ dfsVisited is a helper property for the algorithm -> set it to false for each square in the end$/;"	f
getPoints.setPrefDir	controllers/matchTicker/circuitsChecker.js	/^  function setPrefDir(theSquare, nextSquare){ \/\/ Returns the direction the algorithm is "going"$/;"	f
getPoints.vertices.move	controllers/matchTicker/circuitsChecker.js	/^    var vertices = new Array();$/;"	c
joinMatch	controllers/createMatch.js	/^var joinMatch = function(matchID, playerName){ \/\/ERROR: matchNotFound, matchIsFull, nameAlreadyInUse$/;"	f
keywords	package.json	/^  "keywords": [$/;"	f
license	package.json	/^  "license": "BSD-2-Clause"$/;"	f
main	package.json	/^  "main": "index.js",$/;"	f
matchesManager.createUniqueID	models/match.js	/^var createUniqueID = function(){   \/\/ Create unique matchID$/;"	f
mocha	package.json	/^    "mocha": "*"$/;"	f
name	package.json	/^  "name": "squares",$/;"	f
prepareMatch	views/assets/js/match.js	/^function prepareMatch(board, thisColor, players){$/;"	f
repository	package.json	/^  "repository": {$/;"	f
respond	clientInterface/createMatchSockets.js	/^function respond(socket){$/;"	f
respond	clientInterface/matchSockets.js	/^function respond(socket, io){$/;"	f
scripts	package.json	/^  "scripts": {$/;"	f
sendCountdownEvent	clientInterface/matchSockets.js	/^function sendCountdownEvent(matchID, secondsLeft){$/;"	f
sendErrorEvent	clientInterface/createMatchSockets.js	/^function sendErrorEvent(error){$/;"	f
sendMatchReadyEvent	clientInterface/createMatchSockets.js	/^function sendMatchReadyEvent(matchID){$/;"	f
sendPlayerConnectedEvent	clientInterface/matchSockets.js	/^function sendPlayerConnectedEvent(enquiringPlayer){$/;"	f
sendPrepareGameEvent	clientInterface/matchSockets.js	/^function sendPrepareGameEvent(matchID){$/;"	f
sendUpdateBoardEvent	clientInterface/matchSockets.js	/^function sendUpdateBoardEvent(matchID){$/;"	f
sendUpdateScoreEvent	clientInterface/matchSockets.js	/^function sendUpdateScoreEvent(matchID){$/;"	f
setKeyListener	views/assets/js/match.js	/^function setKeyListener(){$/;"	f
start	package.json	/^    "start": "node index.js"$/;"	f
startDirectionEmits	views/assets/js/match.js	/^function startDirectionEmits(){$/;"	f
swig	package.json	/^    "swig": "^1.4.2"$/;"	f
test	package.json	/^    "test": ".\/node_modules\/mocha\/bin\/mocha --recursive",$/;"	f
type	package.json	/^    "type": "git",$/;"	f
update	controllers/matchTicker/positionUpdater.js	/^$/;"	f
updateBoard	views/assets/js/match.js	/^function updateBoard(data){$/;"	f
updateScore	views/assets/js/match.js	/^function updateScore(data){$/;"	f
url	package.json	/^    "url": "no"$/;"	f
version	package.json	/^  "version": "0.0.0",$/;"	f
